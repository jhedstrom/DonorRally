<?php
// $Id: simple_payments.module,v 1.1 2009/11/17 03:48:49 jbrown Exp $


/**
 * Implement hook_perm() .
 */
function simple_payments_perm() {
  return array('administer simple payments');
}


/**
 * Implement hook_menu() .
 */
function simple_payments_menu() {

  $items['admin/settings/simple-payments'] = array(
    'title' => 'Simple payments',
    'access arguments' => array('administer simple payments'),
    'description' => 'Administer simple payments.',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system')
  );

  return $items;
}

/**
 * Implementation of hook_views_data().
 */
function simple_payments_views_data() {
  $data['simple_payment']['table']['group'] = t('Simple Payment');
  $data['simple_payment']['table']['base'] = array(
    'field' => 'payment_id',
    'title' => t('Payment'),
    'help' => t('Payments made through Simple Payment module'),
  );
  $data['simple_payment']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
  );

  // Related node
  $data['simple_payment']['nid'] = array(
    'title' => t('Node'),
    'help' => t('Node associated with the payment'),
    'relationship' => array(
      'base' => 'node',
      'base field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('Node'),
    ),
  );

  // Related user
  $data['simple_payment']['uid'] = array(
    'title' => t('User'),
    'help' => t("The User ID of the payer."),
    'relationship' => array(
      'base' => 'users',
      'base field' => 'uid',
      'handler' => 'views_handler_relationship',
      'label' => t('User'),
    ),
  );

  // Payment ID
  $data['simple_payment']['payment_id'] = array(
    'title' => t('ID'),
    'help' => t('Payment ID of the payment.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );

  // Gateway
  $data['simple_payment']['gateway'] = array(
    'title' => t('Gateway'),
    'help' => t('Payment gateway.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );

  // Type
  $data['simple_payment']['type'] = array(
    'title' => t('Type'),
    'help' => t('Payment type.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );

  // Custom
  $data['simple_payment']['custom'] = array(
    'title' => t('Custom'),
    'help' => t('Gateway-specific data.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );

  // Currency
  $data['simple_payment']['currency'] = array(
    'title' => t('Currency'),
    'help' => t('Currency used for the payment.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
     ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  // Amount
  $data['simple_payment']['amount'] = array(
    'title' => t('Amount'),
    'help' => t('Amount paid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );

  // Timestamp (when payment was made)
  $data['simple_payment']['timestamp'] = array(
    'title' => t('Payment date'),
    'help' => t('Date and time of when the payment was made.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // Details
  $data['simple_payment']['details'] = array(
    'title' => t('Details'),
    'help' => t('Details.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
     ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  // Processed
  $data['simple_payment']['processed'] = array(
    'title' => t('Date processed'),
    'help' => t('Date and time of when the payment was marked processed.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  // Payer email
  $data['simple_payment']['payer_email'] = array(
    'title' => t('Payer email'),
    'help' => t("Email of the payer."),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument',
    ),
  );


  return $data;
}

/**
 * Builds fields for a payment form from supplied variables.
 *
 * @param $vars
 *   Variables that should be turned into form fields.
 *
 * @return
 *   An array of form fields.
 */
function simple_payments_build_form($vars) {
	global $user;

  // if the uid isn't set, we use the current user's
	
	if(!isset($vars['uid']))
		$vars['uid'] = $user->uid;

  
  // pack our custom vars into the 'custom' field
	
  foreach(array('uid', 'nid') as $name) {
		if(isset($vars[$name])) {
			$custom[$name] = (int)$vars[$name];   // ensure these vars are typed as int to save space once serialized
			unset($vars[$name]);
		}
	}
	
  foreach(array('module', 'type', 'custom') as $name) {
		if(isset($vars[$name])) {
			$custom[$name] = $vars[$name];
			unset($vars[$name]);
		}
	}
	
	// shrink it down as much as possible, don't have any chars that will be escaped

	$vars['custom'] = base64_encode(gzdeflate(serialize($custom), 9));



  // create the form fields
	
	foreach($vars as $name => $value) {
	
	  // is this field a forms api element, or just a value?
	
		if(is_array($value)) {
			
			$form[$name] = $value;
			$form[$name]['#name'] = $name;
		}
		else {
			$form[$name] = array(
				'#type'  => 'hidden',
				'#name'  => $name,
				'#value' => $value
			);
		}
	}
	
	return $form;
}


/**
 * Extracts payment variables that were encoded in the 'custom' field.
 *
 * @param $custom
 *   The 'custom' field returned from the payment gateway.
 *
 * @return
 *   An array of payment variables.
 */
function simple_payments_explode_custom($custom) {

	$custom = unserialize(gzinflate(base64_decode($custom)));
	
  if(is_array($custom)) {

    foreach($custom as $field => $value)
      $values[$field] = $value;
  }

  return $values;
}


/**
 * Loads a payment from the database.
 *
 * @param $payment_id
 *   The payment_id of the payment to be retreived.
 *
 * @return
 *   The payment.
 */
function simple_payments_payment_load($payment_id) {

  $payment = db_fetch_array(db_query("
    SELECT *
    FROM {simple_payment}
    WHERE payment_id = %d
  ",
    $payment_id
  ));
  
  if(!$payment_id)
    return FALSE;
  
  $payment['details'] = unserialize($payment['details']);
  
  return $payment;
}


function _simple_payments_payment_log($payment) {

  // put the decimal point back in
	$payment['amount'] = $payment['amount'] / 100;
	
	// remove some crap we don't want in the log
	unset($payment['timestamp']);
	unset($payment['details']);
	
	watchdog('simple_payments', 'Payment received: @info', array('@info' => var_export($payment, TRUE)));
}


/**
 * Processes a payment.
 *
 * The payment's module's hook_simple_payment_process() will be called to process the payment. If it returns TRUE, the payment's 'processed' field will be updated to the current time.
 *
 * @param $payment
 *   The payment to be processed.
 *
 * @return
 *   TRUE if the payment was successfully processed by its module.
 */
function simple_payments_payment_process(&$payment) {

  if(!$payment['module'])
    return FALSE;
  
  $success = module_invoke($payment['module'], 'simple_payment_process', $payment);
  
  if($success) {
  
    $payment['processed'] = $_SERVER['REQUEST_TIME'];
    drupal_write_record('simple_payment', $payment, 'payment_id');
  }
  
  return $success;
}


/**
 * Handles a payment recieved from a payment gateway.
 *
 * @param $payment
 *   The payment that has been received.
 */
function simple_payments_payment_received($payment) {

  drupal_write_record('simple_payment', $payment);

  _simple_payments_payment_log($payment);
	simple_payments_payment_process($payment);
}

